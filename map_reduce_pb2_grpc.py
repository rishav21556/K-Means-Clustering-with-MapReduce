# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import map_reduce_pb2 as map__reduce__pb2


class MapperStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.assign_task = channel.unary_unary(
                '/Mapper/assign_task',
                request_serializer=map__reduce__pb2.master_to_mapper_task_assign.SerializeToString,
                response_deserializer=map__reduce__pb2.master_to_mapper_task_assign_response.FromString,
                )
        self.give_partition_data = channel.unary_unary(
                '/Mapper/give_partition_data',
                request_serializer=map__reduce__pb2.reducer_to_mapper_file_read.SerializeToString,
                response_deserializer=map__reduce__pb2.reducer_to_mapper_file_read_response.FromString,
                )
        self.is_alive = channel.unary_unary(
                '/Mapper/is_alive',
                request_serializer=map__reduce__pb2.is_alive_response.SerializeToString,
                response_deserializer=map__reduce__pb2.is_alive_response.FromString,
                )


class MapperServicer(object):
    """Missing associated documentation comment in .proto file."""

    def assign_task(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def give_partition_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def is_alive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapperServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'assign_task': grpc.unary_unary_rpc_method_handler(
                    servicer.assign_task,
                    request_deserializer=map__reduce__pb2.master_to_mapper_task_assign.FromString,
                    response_serializer=map__reduce__pb2.master_to_mapper_task_assign_response.SerializeToString,
            ),
            'give_partition_data': grpc.unary_unary_rpc_method_handler(
                    servicer.give_partition_data,
                    request_deserializer=map__reduce__pb2.reducer_to_mapper_file_read.FromString,
                    response_serializer=map__reduce__pb2.reducer_to_mapper_file_read_response.SerializeToString,
            ),
            'is_alive': grpc.unary_unary_rpc_method_handler(
                    servicer.is_alive,
                    request_deserializer=map__reduce__pb2.is_alive_response.FromString,
                    response_serializer=map__reduce__pb2.is_alive_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Mapper', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mapper(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def assign_task(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mapper/assign_task',
            map__reduce__pb2.master_to_mapper_task_assign.SerializeToString,
            map__reduce__pb2.master_to_mapper_task_assign_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def give_partition_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mapper/give_partition_data',
            map__reduce__pb2.reducer_to_mapper_file_read.SerializeToString,
            map__reduce__pb2.reducer_to_mapper_file_read_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def is_alive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mapper/is_alive',
            map__reduce__pb2.is_alive_response.SerializeToString,
            map__reduce__pb2.is_alive_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReducerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.reducer_assign_task = channel.unary_unary(
                '/Reducer/reducer_assign_task',
                request_serializer=map__reduce__pb2.master_to_reducer_task_assign.SerializeToString,
                response_deserializer=map__reduce__pb2.master_to_reducer_task_assign_response.FromString,
                )
        self.is_alive = channel.unary_unary(
                '/Reducer/is_alive',
                request_serializer=map__reduce__pb2.is_alive_response.SerializeToString,
                response_deserializer=map__reduce__pb2.is_alive_response.FromString,
                )


class ReducerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def reducer_assign_task(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def is_alive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReducerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'reducer_assign_task': grpc.unary_unary_rpc_method_handler(
                    servicer.reducer_assign_task,
                    request_deserializer=map__reduce__pb2.master_to_reducer_task_assign.FromString,
                    response_serializer=map__reduce__pb2.master_to_reducer_task_assign_response.SerializeToString,
            ),
            'is_alive': grpc.unary_unary_rpc_method_handler(
                    servicer.is_alive,
                    request_deserializer=map__reduce__pb2.is_alive_response.FromString,
                    response_serializer=map__reduce__pb2.is_alive_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Reducer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Reducer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def reducer_assign_task(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reducer/reducer_assign_task',
            map__reduce__pb2.master_to_reducer_task_assign.SerializeToString,
            map__reduce__pb2.master_to_reducer_task_assign_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def is_alive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reducer/is_alive',
            map__reduce__pb2.is_alive_response.SerializeToString,
            map__reduce__pb2.is_alive_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
